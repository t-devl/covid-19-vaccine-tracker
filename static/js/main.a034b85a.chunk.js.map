{"version":3,"sources":["components/Card.js","components/CardsContainer.js","components/Filter.js","components/Sort.js","App.js","reportWebVitals.js","index.js"],"names":["Card","data","sortOption","rank","className","population","peoplePartiallyVaccinated","name","vaccinesAdministered","toLocaleString","toFixed","peopleVaccinated","CardsContainer","displayedData","map","item","index","Filter","filterOption","setFilterOption","value","onChange","e","target","Sort","setSortOption","App","useState","country","setCountry","setUnitedKingdom","setEuropeanUnion","continents","setContinents","setWorld","setDisplayedData","useEffect","JSON","parse","localStorage","getItem","Date","now","timestamp","unitedKingdom","europeanUnion","world","fetch","then","res","json","Object","keys","forEach","key","push","All","administered","people_vaccinated","people_partially_vaccinated","continent","location","lastUpdated","updated","arrays","setItem","stringify","sortedData","sort","a","b","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a034b85a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Card({ data, sortOption, rank }) {\r\n  return (\r\n    <div\r\n      className={`card ${\r\n        (!data.population || data.peoplePartiallyVaccinated === 0) &&\r\n        sortOption === \"Highest percentage vaccinated\"\r\n          ? \"card--grey\"\r\n          : \"\"\r\n      }`}\r\n    >\r\n      <div className=\"card__index\">{rank}</div>\r\n      <h2 className=\"card__name\">{data.name}</h2>\r\n      <p className=\"card__vaccines-administered\">\r\n        {data.vaccinesAdministered.toLocaleString()} vaccines administered\r\n      </p>\r\n      <p className=\"card__partially-vaccinated\">\r\n        {data.peoplePartiallyVaccinated.toLocaleString()} partially vaccinated{\" \"}\r\n        <span className=\"card__percentage\">\r\n          {data.population\r\n            ? `(${(\r\n                (data.peoplePartiallyVaccinated / data.population) *\r\n                100\r\n              ).toFixed(2)}%)`\r\n            : \"\"}\r\n        </span>\r\n      </p>\r\n      <p className=\"card__fully-vaccinated\">\r\n        {data.peopleVaccinated.toLocaleString()} fully vaccinated{\" \"}\r\n        <span className=\"card__percentage\">\r\n          {data.population\r\n            ? `(${((data.peopleVaccinated / data.population) * 100).toFixed(\r\n                2\r\n              )}%)`\r\n            : \"\"}\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport default function CardsContainer({ displayedData, sortOption }) {\r\n  return (\r\n    <div className=\"cards-container\">\r\n      {displayedData.map((item, index) => (\r\n        <Card\r\n          key={item.name}\r\n          data={item}\r\n          sortOption={sortOption}\r\n          rank={index + 1}\r\n        ></Card>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Filter({ filterOption, setFilterOption }) {\r\n  return (\r\n    <div className=\"filter\">\r\n      <label className=\"filter__label\">Vaccines administered by:</label>\r\n      <select\r\n        className=\"filter__select\"\r\n        value={filterOption}\r\n        onChange={(e) => setFilterOption(e.target.value)}\r\n      >\r\n        <option className=\"filter__option\">Country</option>\r\n        <option className=\"filter__option\">Continent</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Sort({ sortOption, setSortOption, filterOption }) {\r\n  return (\r\n    <div className=\"sort\">\r\n      <label className=\"sort__label\">Sort by:</label>\r\n      <select\r\n        className=\"sort__select\"\r\n        value={sortOption}\r\n        onChange={(e) => setSortOption(e.target.value)}\r\n      >\r\n        <option className=\"sort__option\">Alphabetical (A-Z)</option>\r\n        <option className=\"sort__option\">Most vaccines administered</option>\r\n        {filterOption === \"Country\" ? (\r\n          <option className=\"sort__option\">\r\n            Highest percentage vaccinated\r\n          </option>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport CardsContainer from \"./components/CardsContainer\";\r\nimport Filter from \"./components/Filter\";\r\nimport Sort from \"./components/Sort\";\r\n\r\nfunction App() {\r\n  const [filterOption, setFilterOption] = useState(\"\");\r\n  const [sortOption, setSortOption] = useState(\"Alphabetical (A-Z)\");\r\n  const [country, setCountry] = useState([]);\r\n  const [unitedKingdom, setUnitedKingdom] = useState([]);\r\n  const [europeanUnion, setEuropeanUnion] = useState([]);\r\n  const [continents, setContinents] = useState([]);\r\n  const [world, setWorld] = useState([]);\r\n  const [displayedData, setDisplayedData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      JSON.parse(localStorage.getItem(\"covidVaccineData\")) &&\r\n      Date.now() -\r\n        JSON.parse(localStorage.getItem(\"covidVaccineData\")).timestamp <\r\n        60 * 60 * 1000\r\n    ) {\r\n      let data = JSON.parse(localStorage.getItem(\"covidVaccineData\"));\r\n      setCountry([...data.country]);\r\n      setUnitedKingdom([...data.unitedKingdom]);\r\n      setEuropeanUnion([...data.europeanUnion]);\r\n      setContinents([...data.continents]);\r\n      setWorld([...data.world]);\r\n      setFilterOption(\"Country\");\r\n    } else {\r\n      fetch(\"https://covid-api.mmediagroup.fr/v1/vaccines\")\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          let unitedKingdom = [];\r\n          let europeanUnion = [];\r\n          let country = [];\r\n          let continents = [];\r\n          let world = [];\r\n\r\n          Object.keys(data).forEach((key) => {\r\n            switch (key) {\r\n              case \"England\":\r\n              case \"Northern Ireland\":\r\n              case \"Scotland\":\r\n              case \"Wales\":\r\n                unitedKingdom.push({\r\n                  name: key,\r\n                  vaccinesAdministered: data[key].All.administered,\r\n                  peopleVaccinated: data[key].All.people_vaccinated,\r\n                  peoplePartiallyVaccinated:\r\n                    data[key].All.people_partially_vaccinated,\r\n                  population: data[key].All.population,\r\n                  continent: data[key].All.continent,\r\n                  location: data[key].All.location,\r\n                  lastUpdated: data[key].All.updated,\r\n                });\r\n                break;\r\n              case \"European Union\":\r\n                europeanUnion.push({\r\n                  name: key,\r\n                  vaccinesAdministered: data[key].All.administered,\r\n                  peopleVaccinated: data[key].All.people_vaccinated,\r\n                  peoplePartiallyVaccinated:\r\n                    data[key].All.people_partially_vaccinated,\r\n                  lastUpdated: data[key].All.updated,\r\n                  population: data[key].All.population,\r\n                });\r\n                break;\r\n              case \"Europe\":\r\n              case \"North America\":\r\n              case \"South America\":\r\n              case \"Oceania\":\r\n              case \"Asia\":\r\n              case \"Africa\":\r\n                continents.push({\r\n                  name: key,\r\n                  vaccinesAdministered: data[key].All.administered,\r\n                  peopleVaccinated: data[key].All.people_vaccinated,\r\n                  peoplePartiallyVaccinated:\r\n                    data[key].All.people_partially_vaccinated,\r\n                  lastUpdated: data[key].All.updated,\r\n                });\r\n                break;\r\n              case \"World\":\r\n                world.push({\r\n                  name: key,\r\n                  vaccinesAdministered: data[key].All.administered,\r\n                  peopleVaccinated: data[key].All.people_vaccinated,\r\n                  peoplePartiallyVaccinated:\r\n                    data[key].All.people_partially_vaccinated,\r\n                  lastUpdated: data[key].All.updated,\r\n                  population: data[\"Global\"].All.population,\r\n                });\r\n                break;\r\n              case \"Global\":\r\n                break;\r\n              default:\r\n                country.push({\r\n                  name: key,\r\n                  vaccinesAdministered: data[key].All.administered,\r\n                  peopleVaccinated: data[key].All.people_vaccinated,\r\n                  peoplePartiallyVaccinated:\r\n                    data[key].All.people_partially_vaccinated,\r\n                  population: data[key].All.population,\r\n                  continent: data[key].All.continent,\r\n                  location: data[key].All.location,\r\n                  lastUpdated: data[key].All.updated,\r\n                });\r\n                break;\r\n            }\r\n          });\r\n          return {\r\n            country,\r\n            unitedKingdom,\r\n            europeanUnion,\r\n            continents,\r\n            world,\r\n          };\r\n        })\r\n        .then((arrays) => {\r\n          setCountry([...arrays.country]);\r\n          setUnitedKingdom([...arrays.unitedKingdom]);\r\n          setEuropeanUnion([...arrays.europeanUnion]);\r\n          setContinents([...arrays.continents]);\r\n          setWorld([...arrays.world]);\r\n          setFilterOption(\"Country\");\r\n\r\n          localStorage.setItem(\r\n            \"covidVaccineData\",\r\n            JSON.stringify({\r\n              ...arrays,\r\n              timestamp: Date.now(),\r\n            })\r\n          );\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (filterOption === \"Country\") {\r\n      setDisplayedData(country);\r\n    } else {\r\n      setDisplayedData(continents);\r\n    }\r\n    setSortOption(\"Alphabetical (A-Z)\");\r\n  }, [filterOption]);\r\n\r\n  useEffect(() => {\r\n    if (sortOption === \"Alphabetical (A-Z)\") {\r\n      const sortedData = [...displayedData].sort((a, b) =>\r\n        a.name > b.name ? 1 : -1\r\n      );\r\n      setDisplayedData(sortedData);\r\n    } else if (sortOption === \"Most vaccines administered\") {\r\n      const sortedData = [...displayedData].sort((a, b) =>\r\n        a.vaccinesAdministered < b.vaccinesAdministered ? 1 : -1\r\n      );\r\n      setDisplayedData(sortedData);\r\n    } else if (sortOption === \"Highest percentage vaccinated\") {\r\n      const sortedData = [...displayedData].sort((a, b) =>\r\n        (a.population ? a.peoplePartiallyVaccinated / a.population : -1) <\r\n        (b.population ? b.peoplePartiallyVaccinated / b.population : -1)\r\n          ? 1\r\n          : -1\r\n      );\r\n      setDisplayedData(sortedData);\r\n    }\r\n  }, [sortOption]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"title\">COVID-19 Vaccine Tracker</h1>\r\n      <Filter\r\n        filterOption={filterOption}\r\n        setFilterOption={setFilterOption}\r\n      ></Filter>\r\n      <Sort\r\n        sortOption={sortOption}\r\n        setSortOption={setSortOption}\r\n        filterOption={filterOption}\r\n      ></Sort>\r\n      <CardsContainer\r\n        displayedData={displayedData}\r\n        sortOption={sortOption}\r\n      ></CardsContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}