{"version":3,"sources":["components/Modal.js","components/Card.js","components/CardsContainer.js","components/Filter.js","components/Sort.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","data","active","useState","isModalActive","setIsModalActive","useEffect","className","continent","onClick","name","capital","population","toLocaleString","vaccinesAdministered","peoplePartiallyVaccinated","toFixed","peopleVaccinated","Date","lastUpdated","Card","sortOption","rank","activateModal","cardClicked","CardsContainer","displayedData","setCardClicked","map","item","index","Filter","filterOption","setFilterOption","value","onChange","e","target","Sort","setSortOption","App","countries","setCountries","setWorld","setDisplayedData","JSON","parse","localStorage","getItem","now","timestamp","world","fetch","then","res","json","Object","keys","forEach","key","push","All","administered","people_vaccinated","people_partially_vaccinated","updated","country","regions","location","capital_city","arrays","console","log","setItem","stringify","sortedData","sort","a","b","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16b52d69.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Modal({ data, active }) {\r\n  const [isModalActive, setIsModalActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsModalActive(active);\r\n  }, [active]);\r\n\r\n  const closeModal = () => {\r\n    setIsModalActive(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`modal-container ${\r\n        isModalActive ? \"modal-container--active\" : \"\"\r\n      }`}\r\n    >\r\n      <div className=\"modal\">\r\n        <header className=\"modal__header\">\r\n          <div className=\"modal__top-bar\">\r\n            <span className=\"modal__continent\">{data.continent}</span>\r\n            <button className=\"modal__close-btn\" onClick={closeModal}>\r\n              <i className=\"fas fa-times modal__close-icon\"></i>\r\n            </button>\r\n          </div>\r\n          <h2 className=\"modal__country\">{data.name}</h2>\r\n          <h3 className=\"modal__capital\">Capital: {data.capital}</h3>\r\n          <p className=\"modal__population\">\r\n            Population:{\" \"}\r\n            {data.population ? data.population.toLocaleString() : \"N/A\"}\r\n          </p>\r\n        </header>\r\n        <ul className=\"modal__list\">\r\n          <li className=\"modal__list-item\">\r\n            Vaccines administered: {data.vaccinesAdministered.toLocaleString()}\r\n          </li>\r\n          <li className=\"modal__list-item\">\r\n            Partially vaccinated:{\" \"}\r\n            {data.peoplePartiallyVaccinated.toLocaleString()}{\" \"}\r\n            {data.population\r\n              ? `(${(\r\n                  (data.peoplePartiallyVaccinated / data.population) *\r\n                  100\r\n                ).toFixed(2)}%)`\r\n              : \"\"}\r\n          </li>\r\n          <li className=\"modal__list-item\">\r\n            Fully vaccinated: {data.peopleVaccinated.toLocaleString()}{\" \"}\r\n            {data.population\r\n              ? `(${((data.peopleVaccinated / data.population) * 100).toFixed(\r\n                  2\r\n                )}%)`\r\n              : \"\"}\r\n          </li>\r\n        </ul>\r\n        <p className=\"modal__last-updated\">\r\n          Last updated: {new Date(data.lastUpdated).toLocaleString()}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Modal from \"./Modal\";\r\n\r\nexport default function Card({\r\n  data,\r\n  sortOption,\r\n  rank,\r\n  activateModal,\r\n  cardClicked,\r\n}) {\r\n  return (\r\n    <div\r\n      className={`card ${\r\n        (!data.population || data.peoplePartiallyVaccinated === 0) &&\r\n        sortOption === \"Highest percentage vaccinated\"\r\n          ? \"card--grey\"\r\n          : \"\"\r\n      }`}\r\n      onClick={() => activateModal(data.name)}\r\n    >\r\n      <div className=\"card__index\">{rank}</div>\r\n      <h2 className=\"card__name\">{data.name}</h2>\r\n      <p className=\"card__vaccines-administered\">\r\n        {data.vaccinesAdministered.toLocaleString()} vaccines administered\r\n      </p>\r\n      <p className=\"card__partially-vaccinated\">\r\n        {data.peoplePartiallyVaccinated.toLocaleString()} partially vaccinated{\" \"}\r\n        <span className=\"card__percentage\">\r\n          {data.population\r\n            ? `(${(\r\n                (data.peoplePartiallyVaccinated / data.population) *\r\n                100\r\n              ).toFixed(2)}%)`\r\n            : \"\"}\r\n        </span>\r\n      </p>\r\n      <p className=\"card__fully-vaccinated\">\r\n        {data.peopleVaccinated.toLocaleString()} fully vaccinated{\" \"}\r\n        <span className=\"card__percentage\">\r\n          {data.population\r\n            ? `(${((data.peopleVaccinated / data.population) * 100).toFixed(\r\n                2\r\n              )}%)`\r\n            : \"\"}\r\n        </span>\r\n      </p>\r\n      <Modal data={data} rank={rank} active={cardClicked === data.name}></Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport default function CardsContainer({ displayedData, sortOption }) {\r\n  const [cardClicked, setCardClicked] = useState(\"\");\r\n\r\n  const activateModal = (name) => {\r\n    setCardClicked(name);\r\n  };\r\n\r\n  return (\r\n    <div className=\"cards-container\">\r\n      {displayedData.map((item, index) => (\r\n        <Card\r\n          key={item.name}\r\n          data={item}\r\n          sortOption={sortOption}\r\n          rank={index + 1}\r\n          activateModal={activateModal}\r\n          cardClicked={cardClicked}\r\n        ></Card>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Filter({ filterOption, setFilterOption }) {\r\n  return (\r\n    <div className=\"filter\">\r\n      <label className=\"filter__label\">Vaccines administered by:</label>\r\n      <select\r\n        className=\"filter__select\"\r\n        value={filterOption}\r\n        onChange={(e) => setFilterOption(e.target.value)}\r\n      >\r\n        <option className=\"filter__option\">Country</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Sort({ sortOption, setSortOption, filterOption }) {\r\n  return (\r\n    <div className=\"sort\">\r\n      <label className=\"sort__label\">Sort by:</label>\r\n      <select\r\n        className=\"sort__select\"\r\n        value={sortOption}\r\n        onChange={(e) => setSortOption(e.target.value)}\r\n      >\r\n        <option className=\"sort__option\">Alphabetical (A-Z)</option>\r\n        <option className=\"sort__option\">Most vaccines administered</option>\r\n        {filterOption === \"Country\" ? (\r\n          <option className=\"sort__option\">\r\n            Highest percentage vaccinated\r\n          </option>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport CardsContainer from \"./components/CardsContainer\";\r\nimport Filter from \"./components/Filter\";\r\nimport Sort from \"./components/Sort\";\r\n\r\nfunction App() {\r\n  const [filterOption, setFilterOption] = useState(\"\");\r\n  const [sortOption, setSortOption] = useState(\"Alphabetical (A-Z)\");\r\n  const [countries, setCountries] = useState([]);\r\n  const [world, setWorld] = useState([]);\r\n  const [displayedData, setDisplayedData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      JSON.parse(localStorage.getItem(\"covidVaccineData\")) &&\r\n      Date.now() -\r\n        JSON.parse(localStorage.getItem(\"covidVaccineData\")).timestamp <\r\n        60 * 60 * 1000\r\n    ) {\r\n      let data = JSON.parse(localStorage.getItem(\"covidVaccineData\"));\r\n      setCountries([...data.countries]);\r\n      setWorld([...data.world]);\r\n      setFilterOption(\"Country\");\r\n    } else {\r\n      fetch(\"https://covid-api.mmediagroup.fr/v1/vaccines\")\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          let countries = [];\r\n          let world = [];\r\n\r\n          Object.keys(data).forEach((key) => {\r\n            switch (key) {\r\n              case \"World\":\r\n                world.push({\r\n                  name: key,\r\n                  vaccinesAdministered: data[key].All.administered,\r\n                  peopleVaccinated: data[key].All.people_vaccinated,\r\n                  peoplePartiallyVaccinated:\r\n                    data[key].All.people_partially_vaccinated,\r\n                  lastUpdated: data[key].All.updated,\r\n                  population: data[\"Global\"].All.population,\r\n                });\r\n                break;\r\n              case \"Global\":\r\n                break;\r\n              default:\r\n                const { All: country, ...regions } = data[key];\r\n                countries.push({\r\n                  name: key,\r\n                  vaccinesAdministered: country.administered,\r\n                  peopleVaccinated: country.people_vaccinated,\r\n                  peoplePartiallyVaccinated:\r\n                    country.people_partially_vaccinated,\r\n                  population: country.population,\r\n                  continent: country.continent,\r\n                  location: country.location,\r\n                  capital: country.capital_city,\r\n                  lastUpdated: country.updated,\r\n                  regions: regions,\r\n                });\r\n                break;\r\n            }\r\n          });\r\n          return {\r\n            countries,\r\n            world,\r\n          };\r\n        })\r\n        .then((arrays) => {\r\n          console.log(arrays.countries);\r\n          setCountries([...arrays.countries]);\r\n          setWorld([...arrays.world]);\r\n          setFilterOption(\"Country\");\r\n\r\n          localStorage.setItem(\r\n            \"covidVaccineData\",\r\n            JSON.stringify({\r\n              ...arrays,\r\n              timestamp: Date.now(),\r\n            })\r\n          );\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (filterOption === \"Country\") {\r\n      setDisplayedData(countries);\r\n    }\r\n    setSortOption(\"Alphabetical (A-Z)\");\r\n  }, [filterOption]);\r\n\r\n  useEffect(() => {\r\n    if (sortOption === \"Alphabetical (A-Z)\") {\r\n      const sortedData = [...displayedData].sort((a, b) =>\r\n        a.name > b.name ? 1 : -1\r\n      );\r\n      setDisplayedData(sortedData);\r\n    } else if (sortOption === \"Most vaccines administered\") {\r\n      const sortedData = [...displayedData].sort((a, b) =>\r\n        a.vaccinesAdministered < b.vaccinesAdministered ? 1 : -1\r\n      );\r\n      setDisplayedData(sortedData);\r\n    } else if (sortOption === \"Highest percentage vaccinated\") {\r\n      const sortedData = [...displayedData].sort((a, b) =>\r\n        (a.population ? a.peoplePartiallyVaccinated / a.population : -1) <\r\n        (b.population ? b.peoplePartiallyVaccinated / b.population : -1)\r\n          ? 1\r\n          : -1\r\n      );\r\n      setDisplayedData(sortedData);\r\n    }\r\n  }, [sortOption]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"title\">COVID-19 Vaccine Tracker</h1>\r\n      <Filter\r\n        filterOption={filterOption}\r\n        setFilterOption={setFilterOption}\r\n      ></Filter>\r\n      <Sort\r\n        sortOption={sortOption}\r\n        setSortOption={setSortOption}\r\n        filterOption={filterOption}\r\n      ></Sort>\r\n      <CardsContainer\r\n        displayedData={displayedData}\r\n        sortOption={sortOption}\r\n      ></CardsContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}